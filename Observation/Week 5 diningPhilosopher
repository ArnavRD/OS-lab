#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX 5

int mutex = 1;

int wait(int *s) {
    while (*s <= 0);
    return --*s;
}

int signal(int *s) {
    return ++*s;
}

void eat(int philosopher) {
    printf("P%d is granted to eat\n", philosopher);
    sleep(1);
    printf("P%d has finished eating\n", philosopher);
}

int main() {
    int total;
    int hungryCount;
    int hungry[MAX] = {0};
    int positions[MAX];

    printf("Enter the total number of philosophers: ");
    scanf("%d",&total);

    printf("How many are hungry: ");
    scanf("%d", &hungryCount);

    for (int i = 0; i < hungryCount; i++) {
        printf("Enter P%d pos: ", i + 1);
        scanf("%d", &positions[i]);
        positions[i]--;
        hungry[positions[i]] = 1;
    }

    int choice;

        printf("\n1. One can eat at a time\n2. Two can eat at a time\n3. Exit\n");
        do{
        printf("Enter choice:");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Allow one philosopher to eat at a time\n");
            for (int i = 0; i < hungryCount; i++) {
                int p = positions[i] + 1;
                printf("P%d is waiting\n", p);
            }

            for (int i = 0; i < hungryCount; i++) {
                mutex = wait(&mutex);
                eat(positions[i] + 1);
                mutex = signal(&mutex);
            }
        } else if (choice == 2) {
            printf("Allow two philosophers to eat at a time\n");
            int i = 0;
            while (i < hungryCount) {
                int count = 0;
                while (count < 2 && i < hungryCount) {
                    printf("P%d is waiting\n", positions[i] + 1);
                    i++;
                    count++;
                }

                for (int j = i - count; j < i; j++) {
                    mutex = wait(&mutex);
                    eat(positions[j] + 1);
                    mutex = signal(&mutex);
                }
            }
        }

    } while (choice != 3);

    return 0;
}



OUTPUT

Enter the total number of philosophers: 5
How many are hungry: 3
Enter P1 pos: 2
Enter P2 pos: 4
Enter P3 pos: 5

1. One can eat at a time
2. Two can eat at a time
3. Exit
Enter choice:1
Allow one philosopher to eat at a time
P2 is waiting
P4 is waiting
P5 is waiting
P2 is granted to eat
P2 has finished eating
P4 is granted to eat
P4 has finished eating
P5 is granted to eat
P5 has finished eating
Enter choice:2
Allow two philosophers to eat at a time
P2 is waiting
P4 is waiting
P2 is granted to eat
P2 has finished eating
P4 is granted to eat
P4 has finished eating
P5 is waiting
P5 is granted to eat
P5 has finished eating


